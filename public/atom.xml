<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">Hugo Theme MemE</title>
    <subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle>
    <updated>2020-04-16T18:51:21+08:00</updated>
    <id>https://example.com/</id>
    <link rel="alternate" type="text/html" href="https://example.com/" />
    <link rel="self" type="application/atom+xml" href="https://example.com/atom.xml" />
    <author>
            <name>reuixiy</name>
            <uri>https://example.com/</uri>
            
                <email>reuixiy@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.69.0">Hugo</generator>
        <entry>
            <title type="text">Java高级工程师面试要点</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/23/" />
            <id>https://example.com/posts/23/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2019-03-27T20:51:30+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[AOP AOP称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待，Struts2的拦截器设计就是基于AOP的思想，是个比较经典的例子。
一 AOP的基本概念
(1)Aspect(切面):通常是一个类，里面可以定义切入点和通知
(2)JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用
(3)Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around
(4)Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式
(5)AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类
二 Spring AOP
Spring中的AOP代理还是离不开Spring的IOC容器，代理的生成，管理及其依赖关系都是由IOC容器负责，Spring默认使用JDK动态代理，在需要代理类而不是代理接口的时候，Spring会自动切换为使用CGLIB代理，不过现在的项目都是面向接口编程，所以JDK动态代理相对来说用的还是多一些。
2.通知类型介绍
(1)Before:在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可
(2)AfterReturning:在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值
(3)AfterThrowing:主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名
来访问目标方法中所抛出的异常对象
(4)After:在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式
(5)Around:环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint
IOC 2.1、IoC(控制反转) 首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。
　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。
2.2、DI(依赖注入) IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。
　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。
线程池 线程是稀缺资源，如果被无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，合理的使用线程池对线程进行统一分配、调优和监控，有以下好处：
1、降低资源消耗；
2、提高响应速度；
3、提高线程的可管理性。]]></summary>
            
                <content type="html"><![CDATA[<h1 id="aop">AOP</h1>
<p>AOP称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待，Struts2的拦截器设计就是基于AOP的思想，是个比较经典的例子。</p>
<p>一 AOP的基本概念</p>
<p>(1)Aspect(切面):通常是一个类，里面可以定义切入点和通知</p>
<p>(2)JointPoint(连接点):程序执行过程中明确的点，一般是方法的调用</p>
<p>(3)Advice(通知):AOP在特定的切入点上执行的增强处理，有before,after,afterReturning,afterThrowing,around</p>
<p>(4)Pointcut(切入点):就是带有通知的连接点，在程序中主要体现为书写切入点表达式</p>
<p>(5)AOP代理：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类</p>
<p>二 Spring AOP</p>
<p>Spring中的AOP代理还是离不开Spring的IOC容器，代理的生成，管理及其依赖关系都是由IOC容器负责，Spring默认使用JDK动态代理，在需要代理类而不是代理接口的时候，Spring会自动切换为使用CGLIB代理，不过现在的项目都是面向接口编程，所以JDK动态代理相对来说用的还是多一些。</p>
<p>2.通知类型介绍</p>
<p>(1)Before:在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可</p>
<p>(2)AfterReturning:在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值</p>
<p>(3)AfterThrowing:主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名</p>
<p>来访问目标方法中所抛出的异常对象</p>
<p>(4)After:在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式</p>
<p>(5)Around:环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint</p>
<h1 id="ioc">IOC</h1>
<p>2.1、IoC(控制反转)
　　首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p>
<p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</p>
<p>2.2、DI(依赖注入)
　　IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p>
<p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>
<h1 id="线程池">线程池</h1>
<p>线程是稀缺资源，如果被无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，合理的使用线程池对线程进行统一分配、调优和监控，有以下好处：</p>
<p>1、降低资源消耗；</p>
<p>2、提高响应速度；</p>
<p>3、提高线程的可管理性。</p>
<p>Java1.5中引入的Executor框架把任务的提交和执行进行解耦，只需要定义好任务，然后提交给线程池，而不用关心该任务是如何执行、被哪个线程执行，以及什么时候执行。</p>
<p>ThreadPoolExecutor</p>
<p>Exectors工厂类提供了线程池的初始化接口，主要有如下几种：</p>
<p>newFixedThreadPool</p>
<p>初始化一个指定线程数的线程池，其中corePoolSize == maximumPoolSize，使用LinkedBlockingQuene作为阻塞队列，不过当线程池没有可执行任务时，也不会释放线程。</p>
<p>newCachedThreadPool</p>
<p>1、初始化一个可以缓存线程的线程池，默认缓存60s，线程池的线程数可达到Integer.MAX_VALUE，即2147483647，内部使用SynchronousQueue作为阻塞队列；</p>
<p>2、和newFixedThreadPool创建的线程池不同，newCachedThreadPool在没有任务执行时，当线程的空闲时间超过keepAliveTime，会自动释放线程资源，当提交新任务时，如果没有空闲线程，则创建新线程执行任务，会导致一定的系统开销；</p>
<p>所以，使用该线程池时，一定要注意控制并发的任务数，否则创建大量的线程可能导致严重的性能问题。</p>
<p>newSingleThreadExecutor</p>
<p>初始化的线程池中只有一个线程，如果该线程异常结束，会重新创建一个新的线程继续执行任务，唯一的线程可以保证所提交任务的顺序执行，内部使用LinkedBlockingQueue作为阻塞队列。</p>
<p>newScheduledThreadPool</p>
<p>初始化的线程池可以在指定的时间内周期性的执行所提交的任务，在实际的业务场景中可以使用该线程池定期的同步数据。</p>
<p>实现原理</p>
<p>除了newScheduledThreadPool的内部实现特殊一点之外，其它几个线程池都是基于ThreadPoolExecutor类实现的。</p>
<h1 id="分布式锁">分布式锁</h1>
<p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p>
<p>基于数据库做分布式锁</p>
<p>基于乐观锁</p>
<p>利用主键唯一的特性，如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，当方法执行完毕之后，想要释放锁的话，删除这条数据库记录即可。</p>
<p>基于悲观锁</p>
<p>在查询语句后面增加for update，数据库会在查询过程中给数据库表增加排他锁 (注意： InnoDB 引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。这里我们希望使用行级锁，就要给要执行的方法字段名添加索引，值得注意的是，这个索引一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上。)。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p>
<p>基于 Redis 做分布式锁</p>
<p>setnx()</p>
<p>setnx 的含义就是 SET if Not Exists，其主要有两个参数 setnx(key, value)。该方法是原子的，如果 key 不存在，则设置当前 key 成功，返回 1；如果当前 key 已经存在，则设置当前 key 失败，返回 0。</p>
<p>expire()</p>
<p>expire 设置过期时间，要注意的是 setnx 命令不能设置 key 的超时时间，只能通过 expire() 来对 key 设置。</p>
<h1 id="几种map">几种MAP</h1>
<p>HashMap</p>
<p>最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null(多条会覆盖);允许多条记录的值为 Null。非同步的。</p>
<p>TreeMap</p>
<p>能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。
Hashtable</p>
<p>与 HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢。
LinkedHashMap</p>
<p>保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.在遍历的时候会比HashMap慢。key和value均允许为空，非同步的。</p>
<p>ConcurrentHashMap</p>
<p>ConcurrentHashMap是一个线程安全，并且是一个高效的HashMap。
但是，如果从线程安全的角度来说，HashTable已经是一个线程安全的HashMap，那推出ConcurrentHashMap的意义又是什么呢？
说起ConcurrentHashMap，就不得不先提及下HashMap在线程不安全的表现，以及HashTable的效率！</p>
<p>HashMap 与 HashTable 区别
默认容量不同，扩容不同
线程安全性：HashTable 安全
效率不同：HashTable 要慢，因为加锁</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">《《如何高效学习》》阅读笔记</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/22/" />
            <id>https://example.com/posts/22/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-12-03T20:51:30+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[整体性学习策略 整体性学习的关键在于创建信息的网络，类似于我们的大脑的神经网络，建立知识之间的关联。
结构 结构好比大脑中的城市，他包含了知识之间的联系。
数学知识和语言知识就是最大的城市，例如北京、上海。
模型 模型就好像城市中的建筑物。
模型的目的是压缩信息。
书的目录就是压缩信息，看了目录基本就知道这本书讲什么了。
高速公路 好比城市之间的高速公路。这里比喻的是知识之间的联系。
比如我看这本书，我需要用到我的语言知识（汉语），生物知识（神经网络），那么我学习的如何学习的知识实际上是和其他知识建立了连接的。
以下是高速公路的表现形式
 感知结构  声音、图像和情感。
关系结构  人与人之间的关系。
基础数学结构  如果有人不明白次序增长的意义。那下面这个他就会明白
1.01的1000次方等于20959，微小的量变会引起质变。
比喻法  ]]></summary>
            
                <content type="html"><![CDATA[<h1 id="整体性学习策略">整体性学习策略</h1>
<p>整体性学习的关键在于创建信息的网络，类似于我们的大脑的神经网络，建立知识之间的关联。</p>
<h2 id="结构">结构</h2>
<p>结构好比大脑中的城市，他包含了知识之间的联系。</p>
<p>数学知识和语言知识就是最大的城市，例如北京、上海。</p>
<h2 id="模型">模型</h2>
<p>模型就好像城市中的建筑物。</p>
<p>模型的目的是压缩信息。</p>
<p>书的目录就是压缩信息，看了目录基本就知道这本书讲什么了。</p>
<h2 id="高速公路">高速公路</h2>
<p>好比城市之间的高速公路。这里比喻的是知识之间的联系。</p>
<p>比如我看这本书，我需要用到我的语言知识（汉语），生物知识（神经网络），那么我学习的如何学习的知识实际上是和其他知识建立了连接的。</p>
<p>以下是高速公路的表现形式</p>
<ol>
<li>感知结构</li>
</ol>
<p>声音、图像和情感。</p>
<ol start="2">
<li>关系结构</li>
</ol>
<p>人与人之间的关系。</p>
<ol start="3">
<li>基础数学结构</li>
</ol>
<p>如果有人不明白次序增长的意义。那下面这个他就会明白</p>
<p>1.01的1000次方等于20959，微小的量变会引起质变。</p>
<ol start="4">
<li>比喻法</li>
</ol>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">学习计划</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/21/" />
            <id>https://example.com/posts/21/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-12-03T20:37:22+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[最近在多抓鱼上买了些书。
如何高效学习 学习到底有没有方法，我觉得是有的，不然怎么解释有的人学的又快又好。其实人与人之间的差别还没有那么大。
代码大全 这本书可以看作是个编程范式的集合，如何写出优雅、健壮的代码。
重构 在大多数时候我们都是在维护代码，重构可以说是我们工作中很重要的一部分。
设计模式 要写出优雅、健壮的代码有时候还是需要些设计模式的，倒不是说不用就不行了，这毕竟是受大家认可的方法。
计算机程序的构造和解释 以我个人的理解，这是一本关于编程的哲学书，在不一样的角度去看待编程，所以这本书用什么语言去描述都不重要了。
编码 这本书通过讲故事的方法去理解深奥的计算机系统。
算法 基本上是一部算法方面的教科书、拿来作为参考资料很不错，最主要的是本书图文并茂。
深入理解计算机系统 这本书知识点讲的很细，很适合想要学习计算机的底层知识。]]></summary>
            
                <content type="html"><![CDATA[<p>最近在多抓鱼上买了些书。</p>
<h2 id="如何高效学习">如何高效学习</h2>
<p>学习到底有没有方法，我觉得是有的，不然怎么解释有的人学的又快又好。其实人与人之间的差别还没有那么大。</p>
<h2 id="代码大全">代码大全</h2>
<p>这本书可以看作是个编程范式的集合，如何写出优雅、健壮的代码。</p>
<h2 id="重构">重构</h2>
<p>在大多数时候我们都是在维护代码，重构可以说是我们工作中很重要的一部分。</p>
<h2 id="设计模式">设计模式</h2>
<p>要写出优雅、健壮的代码有时候还是需要些设计模式的，倒不是说不用就不行了，这毕竟是受大家认可的方法。</p>
<h2 id="计算机程序的构造和解释">计算机程序的构造和解释</h2>
<p>以我个人的理解，这是一本关于编程的哲学书，在不一样的角度去看待编程，所以这本书用什么语言去描述都不重要了。</p>
<h2 id="编码">编码</h2>
<p>这本书通过讲故事的方法去理解深奥的计算机系统。</p>
<h2 id="算法">算法</h2>
<p>基本上是一部算法方面的教科书、拿来作为参考资料很不错，最主要的是本书图文并茂。</p>
<h2 id="深入理解计算机系统">深入理解计算机系统</h2>
<p>这本书知识点讲的很细，很适合想要学习计算机的底层知识。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">《计算机科学导论》读后感</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/20/" />
            <id>https://example.com/posts/20/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-11-26T15:46:00+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[感觉？ 这本书给我最大的感觉就是不会用很多枯燥的数学公式或理论去讲述知识。
她会有很多图再配上很多的实例，写的通俗易懂。
适合什么人读？ 我感觉如果是计算机相关专业的话，那么书上的知识多多少少都学过或者了解。但是我仍然推荐阅读，其一是把知识梳理了一遍，其二是因为作者独特的写作能让你有不一样的体会。
当然由于本书只是导论，所以写的很浅显，如果要深入学习里面的知识，还是需要看相关的书籍。
如果不是计算机专业的，通过阅读本书能对计算机系统有个大致了解，不会犯一些低级错误。]]></summary>
            
                <content type="html"><![CDATA[<h2 id="感觉">感觉？</h2>
<p>这本书给我最大的感觉就是不会用很多枯燥的数学公式或理论去讲述知识。</p>
<p>她会有很多图再配上很多的实例，写的通俗易懂。</p>
<h2 id="适合什么人读">适合什么人读？</h2>
<p>我感觉如果是计算机相关专业的话，那么书上的知识多多少少都学过或者了解。但是我仍然推荐阅读，其一是把知识梳理了一遍，其二是因为作者独特的写作能让你有不一样的体会。</p>
<p>当然由于本书只是导论，所以写的很浅显，如果要深入学习里面的知识，还是需要看相关的书籍。</p>
<p>如果不是计算机专业的，通过阅读本书能对计算机系统有个大致了解，不会犯一些低级错误。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">给MongoDB设置密码</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/19/" />
            <id>https://example.com/posts/19/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-11-13T18:20:41+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[启动MongoDB
1 2  mongod --dbpath ~/data/db  连接MongoDB
1 2 3 4 5 6 7  mongouse admin;db.createUser({ user: &#34;admin&#34;, pwd: &#34;qw3erTYU&#34;, roles: [{ role: &#34;userAdminAnyDatabase&#34;, db: &#34;admin&#34; }] })db.auth(&#34;admin&#34;, &#34;qw3erTYU&#34;)  退出MongoDB
1  mongod --dbpath ~/data/db --auth  连接数据库]]></summary>
            
                <content type="html"><![CDATA[<p>启动MongoDB</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
mongod --dbpath ~/data/db
</code></pre></td></tr></table>
</div>
</div><p>连接MongoDB</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mongo

use admin<span class="p">;</span>

db.createUser<span class="o">({</span> user: <span class="s2">&#34;admin&#34;</span>, pwd: <span class="s2">&#34;qw3erTYU&#34;</span>, roles: <span class="o">[{</span> role: <span class="s2">&#34;userAdminAnyDatabase&#34;</span>, db: <span class="s2">&#34;admin&#34;</span> <span class="o">}]</span> <span class="o">})</span>

db.auth<span class="o">(</span><span class="s2">&#34;admin&#34;</span>, <span class="s2">&#34;qw3erTYU&#34;</span><span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>退出MongoDB</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mongod --dbpath ~/data/db --auth
</code></pre></td></tr></table>
</div>
</div><p>连接数据库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">use admin<span class="p">;</span>

db.auth<span class="o">(</span><span class="s2">&#34;admin&#34;</span>, <span class="s2">&#34;qw3erTYU&#34;</span><span class="o">)</span>

db.createUser<span class="o">({</span> user: <span class="s2">&#34;huiqia&#34;</span>, pwd: <span class="s2">&#34;huiqia&#34;</span>, roles: <span class="o">[{</span> role: <span class="s2">&#34;readWrite&#34;</span>, db: <span class="o">[</span><span class="s2">&#34;doc&#34;</span>, <span class="s2">&#34;crawler&#34;</span><span class="o">]</span> <span class="o">}]</span> <span class="o">})</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Windows 10 下的Linux如何使用docker</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/18/" />
            <id>https://example.com/posts/18/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-09-22T18:20:41+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[首先需要在Windows下安装一个Docker，具体怎么安装可以到网上搜
然后打开Dockers的Settings，勾选导出
1 2  # 在linux下运行export DOCKER_HOST=tcp://127.0.0.1:2375  ]]></summary>
            
                <content type="html"><![CDATA[<p>首先需要在Windows下安装一个Docker，具体怎么安装可以到网上搜</p>
<p>然后打开Dockers的Settings，勾选导出</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180926163032.png" alt=""></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 在linux下运行</span>
<span class="nb">export</span> <span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://127.0.0.1:2375
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Ubuntu 18.04 安装Docker和Docker Componse</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/17/" />
            <id>https://example.com/posts/17/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-08-22T18:20:41+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  sudo apt-get remove docker docker-engine docker.io sudo apt-get update sudo apt-get install \  apt-transport-https \  ca-certificates \  curl \  software-properties-common curl -fsSL https://download.]]></summary>
            
                <content type="html"><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get remove docker docker-engine docker.io

sudo apt-get update

sudo apt-get install <span class="se">\
</span><span class="se"></span>    apt-transport-https <span class="se">\
</span><span class="se"></span>    ca-certificates <span class="se">\
</span><span class="se"></span>    curl <span class="se">\
</span><span class="se"></span>    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo apt-key add -


sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository <span class="se">\
</span><span class="se"></span>   <span class="s2">&#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
</span><span class="s2">   </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> \
</span><span class="s2">   stable&#34;</span>

sudo apt-get update

sudo apt-get install docker-ce

apt-cache madison docker-ce

sudo apt-get install docker-ce<span class="o">=</span>&lt;VERSION&gt;


</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="k">$(</span>uname -s<span class="k">)</span>-<span class="k">$(</span>uname -m<span class="k">)</span> -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">保持SSH连接</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/16/" />
            <id>https://example.com/posts/16/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-08-22T17:07:05+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[在我的工作中，总会有远程连接服务器的场景。
但是如果有一段时间没有活跃的会话的话，连接就会断开。每次都得重新连接。很麻烦，有没有方法可以永不断开呢？
有。但是需要服务器和客户端都得配置。
 Server 1 2 3 4 5 6 7 8 9 10 11 12 13  # 打开sshd的配置文件 vim /etc/ssh/sshd_config # 保持连接 TCPKeepAlive yes # 心跳检测间隔 ClientAliveInterval 60 # 最大失败次数，超过这个得不到响应就断开 ClientAliveCountMax 3 # 不适用密码认证 PasswordAuthentication no sudo service sshd restart   Client 1 2 3 4 5  vim ~/.]]></summary>
            
                <content type="html"><![CDATA[<p>在我的工作中，总会有远程连接服务器的场景。</p>
<p>但是如果有一段时间没有活跃的会话的话，连接就会断开。每次都得重新连接。很麻烦，有没有方法可以永不断开呢？</p>
<p>有。但是需要服务器和客户端都得配置。</p>
<hr>
<h1 id="server">Server</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 打开sshd的配置文件</span>
vim /etc/ssh/sshd_config

<span class="c1"># 保持连接</span>
TCPKeepAlive yes
<span class="c1"># 心跳检测间隔</span>
ClientAliveInterval <span class="m">60</span>
<span class="c1"># 最大失败次数，超过这个得不到响应就断开</span>
ClientAliveCountMax <span class="m">3</span>
<span class="c1"># 不适用密码认证</span>
PasswordAuthentication no

sudo service sshd restart
</code></pre></td></tr></table>
</div>
</div><h1 id="client">Client</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">vim ~/.ssh/config

<span class="c1"># 和服务器的设置同理</span>
ServerAliveInterval <span class="m">60</span>
ServerAliveCountMax <span class="m">3</span>
</code></pre></td></tr></table>
</div>
</div><p>这样妈妈再也不用担心连接断开了。</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从零开始写数据库（五）</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/15/" />
            <id>https://example.com/posts/15/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-30T16:39:36+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[实现MemTable 未完待续！]]></summary>
            
                <content type="html"><![CDATA[<h1 id="实现memtable">实现MemTable</h1>
<p>未完待续！</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/leveldb/" term="LevelDB" label="LevelDB" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/memtable/" term="MemTable" label="MemTable" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/database/" term="Database" label="Database" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从零开始写数据库（四）</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/14/" />
            <id>https://example.com/posts/14/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-30T16:39:33+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[实现LevelDB的日志系统 参考设计文档Log Format
前面创建了一个数据库，但是数据是存储在一个csv文件中，在实际的项目中，数据是以二进制的形式存储
我们最终的目的是写一个类似levelDB的数据库，我们先要了解下LevelDB的运作机制
在LevelDB中写入数据大概是这样几步
 接收到请求Write(k, v) 把请求写入日志Op log 把数据写入MemTable 第三步完成就可以通知客户端写入成功了 当memtable的数据达到临界值的时候，转变成immutable memtable 压缩immutable memtable 写入sstable  这个信息量有点大，我们先来解释下几个名词
Op log 这个Op是对数据做改变的操作，所以Put和Delete都会写入Op log
op log文件是以块的形式存储的，每个块的大小固定为32KB,每个文件会有1个和多个块，这里我们简单点一个Block对应一个文件
具体来说，最终会在磁盘上像0.log、1.log、2.log的形式存储
Op Log的格式 1 2 3 4 5 6 7 8 9 10 11  +---------+-----------+-----------+--- .]]></summary>
            
                <content type="html"><![CDATA[<h1 id="实现leveldb的日志系统">实现LevelDB的日志系统</h1>
<p>参考设计文档<a href="https://github.com/google/leveldb/blob/master/doc/log_format.md">Log Format</a></p>
<p>前面创建了一个数据库，但是数据是存储在一个csv文件中，在实际的项目中，数据是以二进制的形式存储</p>
<p>我们最终的目的是写一个类似levelDB的数据库，我们先要了解下LevelDB的运作机制</p>
<p>在LevelDB中写入数据大概是这样几步</p>
<ol>
<li>接收到请求Write(k, v)</li>
<li>把请求写入日志Op log</li>
<li>把数据写入MemTable</li>
<li>第三步完成就可以通知客户端写入成功了</li>
<li>当memtable的数据达到临界值的时候，转变成immutable memtable</li>
<li>压缩immutable memtable</li>
<li>写入sstable</li>
</ol>
<p>这个信息量有点大，我们先来解释下几个名词</p>
<h2 id="op-log">Op log</h2>
<p>这个Op是对数据做改变的操作，所以<em>Put</em>和<em>Delete</em>都会写入Op log</p>
<p>op log文件是以块的形式存储的，每个块的大小固定为32KB,每个文件会有1个和多个块，这里我们简单点一个Block对应一个文件</p>
<p>具体来说，最终会在磁盘上像<em>0.log</em>、<em>1.log</em>、<em>2.log</em>的形式存储</p>
<h3 id="op-log的格式">Op Log的格式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">+---------+-----------+-----------+--- ... ---+
<span class="p">|</span>CRC <span class="o">(</span>4B<span class="o">)</span> <span class="p">|</span> Size <span class="o">(</span>2B<span class="o">)</span> <span class="p">|</span> Type <span class="o">(</span>1B<span class="o">)</span> <span class="p">|</span> Payload   <span class="p">|</span>
+---------+-----------+-----------+--- ... ---+

<span class="nv">CRC</span> <span class="o">=</span> 32bit <span class="nb">hash</span> computed over the payload using CRC
<span class="nv">Size</span> <span class="o">=</span> Length of the payload data
<span class="nv">Type</span> <span class="o">=</span> Type of record
       <span class="o">(</span>kZeroType, kFullType, kFirstType, kLastType, kMiddleType <span class="o">)</span>
       The <span class="nb">type</span> is used to group a bunch of records together to represent
       blocks that are larger than kBlockSize
<span class="nv">Payload</span> <span class="o">=</span> Byte stream as long as specified by the payload size
</code></pre></td></tr></table>
</div>
</div><p>我们先生成定义日志的格式</p>
<p>record.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Record</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">CRC</span> <span class="kt">uint32</span>
	<span class="nx">Size</span> <span class="kt">uint16</span>
	<span class="nx">Type</span> <span class="kt">uint8</span>
	<span class="nx">Payload</span> <span class="p">[]</span><span class="kt">byte</span>
<span class="p">}</span>
<span class="c1">// 新建记录，根据类型和数据
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewRecord</span><span class="p">(</span><span class="nx">typ</span> <span class="kt">uint8</span><span class="p">,</span> <span class="nx">payload</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="nx">Record</span> <span class="p">{</span>
	<span class="c1">// 新建数据缓冲区，长度是type的长度加上数据的长度，type一个字节长度
</span><span class="c1"></span>	<span class="nx">buf</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nx">payload</span><span class="p">)));</span>

	<span class="nx">buf</span><span class="p">.</span><span class="nf">WriteByte</span><span class="p">(</span><span class="nx">typ</span><span class="p">)</span>
	<span class="nx">buf</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span>

	<span class="c1">// 计算crc32
</span><span class="c1"></span>	<span class="nx">crc</span> <span class="o">:=</span> <span class="nx">crc32</span><span class="p">.</span><span class="nf">ChecksumIEEE</span><span class="p">(</span><span class="nx">buf</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">())</span>

	<span class="k">return</span> <span class="nx">Record</span><span class="p">{</span>
		<span class="nx">crc</span><span class="p">,</span>
		<span class="nb">uint16</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">payload</span><span class="p">)),</span>
		<span class="nx">typ</span><span class="p">,</span>
		<span class="nx">payload</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/database/" term="Database" label="Database" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从零开始写数据库（三）</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/13/" />
            <id>https://example.com/posts/13/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-30T14:39:57+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[创建具有网络功能的数据库 修改main.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  package main import ( &#34;fmt&#34; &#34;net&#34; &#34;bufio&#34; &#34;os&#34; &#34;strings&#34; ) func main() { defer Save() // 监听8080端口 	ln, err := net.]]></summary>
            
                <content type="html"><![CDATA[<h1 id="创建具有网络功能的数据库">创建具有网络功能的数据库</h1>
<p>修改main.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;net&#34;</span>
	<span class="s">&#34;bufio&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;strings&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
	<span class="k">defer</span> <span class="nf">Save</span><span class="p">()</span>

	<span class="c1">// 监听8080端口
</span><span class="c1"></span>	<span class="nx">ln</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;:8080&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="c1">// handle error
</span><span class="c1"></span>	<span class="p">}</span>
	<span class="c1">// 死循环
</span><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
		<span class="c1">// 拿到连接
</span><span class="c1"></span>		<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ln</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="c1">// handle error
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="c1">// 处理函数
</span><span class="c1"></span>		<span class="k">go</span> <span class="nf">handleConnection</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
	<span class="p">}</span>


<span class="p">}</span>

<span class="kd">func</span> <span class="nf">handleConnection</span><span class="p">(</span><span class="nx">conn</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Conn</span><span class="p">)</span>  <span class="p">{</span>

	<span class="c1">// Response，返回数据
</span><span class="c1"></span>	<span class="nx">send</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>

	<span class="c1">// Request，接受数据
</span><span class="c1"></span>	<span class="nx">scanner</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewScanner</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>

	<span class="c1">// 这里以\n作为分隔符
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Scan</span><span class="p">()</span> <span class="p">{</span>
		<span class="c1">// 命令分隔符，这里以一个空格作为分隔符
</span><span class="c1"></span>		<span class="nx">arr</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">scanner</span><span class="p">.</span><span class="nf">Text</span><span class="p">(),</span> <span class="s">&#34; &#34;</span><span class="p">)</span>

		<span class="nx">command</span> <span class="o">:=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>


		<span class="k">switch</span> <span class="nx">command</span> <span class="p">{</span>
		<span class="k">case</span> <span class="s">&#34;set&#34;</span><span class="p">:</span>
			<span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
			<span class="nf">Put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
		    <span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;Set success!\n&#34;</span><span class="p">)</span>
		<span class="k">case</span> <span class="s">&#34;get&#34;</span><span class="p">:</span>
			<span class="nx">key</span> <span class="o">:=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

			<span class="nx">value</span> <span class="o">:=</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>

			<span class="k">if</span> <span class="nx">value</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
				<span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;Get fail, key not found!\n&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;Get success, this is result: &#34;</span><span class="p">)</span>
				<span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
				<span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;\n&#34;</span><span class="p">)</span>
			<span class="p">}</span>

		<span class="k">case</span> <span class="s">&#34;del&#34;</span><span class="p">:</span>
			<span class="nx">key</span> <span class="o">:=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
			<span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
		    <span class="nx">send</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;Del success!\n&#34;</span><span class="p">)</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Not support command!&#34;</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="nx">send</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scanner</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;reading standard input:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>这里用类似redis的command处理请求</p>
<ol>
<li>新增、修改</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">set</span> <span class="o">[</span>key<span class="o">]</span> <span class="o">[</span>value<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>读取</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">get <span class="o">[</span>key<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>删除</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">del <span class="o">[</span>key<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p>我们使用telnet来测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">telnet 127.0.0.1 <span class="m">8080</span>

Trying 127.0.0.1...
Connected to localhost.
Escape character is <span class="s1">&#39;^]&#39;</span>.
<span class="nb">set</span> a b
Set success!
get a
Get success, this is result: b
del a
Del success!
get a
Get fail, key not found!
</code></pre></td></tr></table>
</div>
</div><p>如预期的一致，这个时候我们的数据具有了处理网络连接的功能，但是显然这样的数据库还是太弱了。我们的最终目标是创建一个类似LevelDB+Redis的数据库</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/database/" term="Database" label="Database" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从零开始写数据库（二）</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/12/" />
            <id>https://example.com/posts/12/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-30T14:39:52+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[持久化数据 这里使用csv格式保存数据
修改db.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87  package main import ( &#34;encoding/csv&#34; &#34;os&#34; &#34;log&#34; &#34;io/ioutil&#34; &#34;bytes&#34; ) const FILE = &#34;.]]></summary>
            
                <content type="html"><![CDATA[<h1 id="持久化数据">持久化数据</h1>
<p>这里使用csv格式保存数据</p>
<p>修改db.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;encoding/csv&#34;</span>
	<span class="s">&#34;os&#34;</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;io/ioutil&#34;</span>
	<span class="s">&#34;bytes&#34;</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="nx">FILE</span> <span class="p">=</span> <span class="s">&#34;./db.csv&#34;</span>

<span class="c1">// 声明一个map
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>


<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span>  <span class="p">{</span>
	<span class="c1">// 初始化map
</span><span class="c1"></span>	<span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>

	<span class="c1">// 打开文件
</span><span class="c1"></span>	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">FILE</span><span class="p">)</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="c1">// 读取CSV文件
</span><span class="c1"></span>	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">csv</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>

	<span class="c1">// 读取数据，这里data的类型是[][]string
</span><span class="c1"></span>	<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">()</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// 循环数组
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span>  <span class="p">{</span>
		<span class="c1">// 获取行
</span><span class="c1"></span>		<span class="nx">row</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>

		<span class="c1">// 第一个为key
</span><span class="c1"></span>		<span class="nx">key</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
		<span class="c1">// 第二个为value
</span><span class="c1"></span>		<span class="nx">value</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

		<span class="c1">// 保持到内存
</span><span class="c1"></span>		<span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">value</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 新建，修改
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">value</span>
<span class="p">}</span>
<span class="c1">// 删除
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>  <span class="p">{</span>
	<span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 读取
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1">// 写入文件
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Save</span><span class="p">()</span>  <span class="p">{</span>

	<span class="c1">// 新建写入流
</span><span class="c1"></span>	<span class="nx">buf</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span>

	<span class="nx">writer</span> <span class="o">:=</span> <span class="nx">csv</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>

	<span class="nx">log</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
		<span class="c1">// 写入数据
</span><span class="c1"></span>		<span class="nx">writer</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">})</span>
		<span class="nx">writer</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>

	<span class="c1">// 保存到文件
</span><span class="c1"></span>	<span class="nx">ioutil</span><span class="p">.</span><span class="nf">WriteFile</span><span class="p">(</span><span class="nx">FILE</span><span class="p">,</span> <span class="nx">buf</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">(),</span> <span class="mo">0777</span> <span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们写个测试类测试</p>
<p>main_test.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;testing&#34;</span>

<span class="kd">func</span> <span class="nf">TestPut</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">Put</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">,</span> <span class="s">&#34;world&#34;</span><span class="p">)</span>
	<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;insert a record&#34;</span><span class="p">)</span>
	<span class="nx">value</span> <span class="o">:=</span> <span class="nf">Get</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">value</span> <span class="o">==</span> <span class="s">&#34;world&#34;</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;get a record&#34;</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;insert error&#34;</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;save&#34;</span><span class="p">)</span>
	<span class="k">defer</span> <span class="nf">Save</span><span class="p">()</span>
	<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;save&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestGet</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">value</span> <span class="o">:=</span> <span class="nf">Get</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">value</span> <span class="o">==</span> <span class="s">&#34;world&#34;</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;get a record&#34;</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;insert error&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nf">Save</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestDelete</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">Delete</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
	<span class="nx">value</span> <span class="o">:=</span> <span class="nf">Get</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">value</span> <span class="o">==</span> <span class="s">&#34;world&#34;</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;get a record&#34;</span><span class="p">)</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">&#34;insert error&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nf">Save</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>开测</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go <span class="nb">test</span>

2018/06/30 14:26:29 map<span class="o">[</span>hello:world<span class="o">]</span>
2018/06/30 14:26:29 hello: world
2018/06/30 14:26:29 hello,world

2018/06/30 14:26:29 map<span class="o">[</span>hello:world<span class="o">]</span>
2018/06/30 14:26:29 hello: world
2018/06/30 14:26:29 hello,world

2018/06/30 14:26:29 map<span class="o">[]</span>
2018/06/30 14:26:29 
PASS
ok  	github.com/ixiongdi/leveldb	0.013s
</code></pre></td></tr></table>
</div>
</div><p>结果如预期的一样，这样我们实现了一个简单的具有数据持久化功能的kv数据库</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/database/" term="Database" label="Database" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">从零开始写数据库（一）</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/11/" />
            <id>https://example.com/posts/11/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-30T09:41:02+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[前言 近些年各种数据库层出不穷，归根结底是因为互联网的快速发展，现有数据库无法满足需求。
数据库技术高深莫测，今天我们就来自己动手实现一个数据库系统。实现语言为Go。
当今数据库可分为几大类型
 Relational DBMS，传统的关系型数据库也就是我们常说的以SQL为查询语言的数据库，代表作有MySQL、PostgreSQL Document store，文档数据库，数据模式自由，代表作有MongoDB Key-value store，键值存储数据库，代表作有Redis Search engine，搜索引擎，代表作有Elasticsearch Wide column store，宽行数据库，代表作有Cassandra  虽然说数据库类型很多，但是其底层都离不开一个存储引擎。这个存储引擎多半是个KV数据库系统
我们以业内比较早，实现清晰的LevelDB作为参考实现
新建项目 在GitHub上新建一个项目LevelGo
新建文件main.go
1 2 3 4 5 6 7  package main import &#34;fmt&#34; func main() { fmt.Printf(&#34;Hello, world!&#34;) }   运行程序]]></summary>
            
                <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>近些年各种数据库层出不穷，归根结底是因为互联网的快速发展，现有数据库无法满足需求。</p>
<p>数据库技术高深莫测，今天我们就来自己动手实现一个数据库系统。实现语言为Go。</p>
<p>当今数据库可分为几大类型</p>
<ol>
<li>Relational DBMS，传统的关系型数据库也就是我们常说的以SQL为查询语言的数据库，代表作有MySQL、PostgreSQL</li>
<li>Document store，文档数据库，数据模式自由，代表作有MongoDB</li>
<li>Key-value store，键值存储数据库，代表作有Redis</li>
<li>Search engine，搜索引擎，代表作有Elasticsearch</li>
<li>Wide column store，宽行数据库，代表作有Cassandra</li>
</ol>
<p>虽然说数据库类型很多，但是其底层都离不开一个存储引擎。这个存储引擎多半是个KV数据库系统</p>
<p>我们以业内比较早，实现清晰的LevelDB作为参考实现</p>
<h1 id="新建项目">新建项目</h1>
<p>在GitHub上新建一个项目<em>LevelGo</em></p>
<p>新建文件main.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>运行程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go run main.go
</code></pre></td></tr></table>
</div>
</div><p>输出结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Hello, world!
</code></pre></td></tr></table>
</div>
</div><h1 id="基于内存的数据库">基于内存的数据库</h1>
<p>新建文件db.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="c1">// 声明一个map
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>

<span class="c1">// 初始化map
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span>  <span class="p">{</span>
	<span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 新建，修改
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">value</span>
<span class="p">}</span>
<span class="c1">// 删除
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>  <span class="p">{</span>
	<span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 读取
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">m</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>修改main.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="p">)</span>

	<span class="c1">// 插入
</span><span class="c1"></span>	<span class="nf">Put</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">,</span> <span class="s">&#34;world&#34;</span><span class="p">)</span>

	<span class="c1">// 读取
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">))</span>

	<span class="c1">// 删除
</span><span class="c1"></span>	<span class="nf">Delete</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">)</span>

	<span class="c1">// 读取
</span><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">))</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go run *.go

Hello, world!
world


</code></pre></td></tr></table>
</div>
</div><p>当然一个完整的数据库不可能这么简单</p>
<p>这是一个内存数据库，不能持久化数据。而且支持的存储类型只有string一种</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/database/" term="Database" label="Database" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/leveldb/" term="LevelDB" label="LevelDB" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/redis/" term="Redis" label="Redis" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">极致性能</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/10/" />
            <id>https://example.com/posts/10/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-29T16:28:49+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[前言 这篇文章主要讲目前我自己认为的最优化的性能解决方案
目前来说程序的前后分离越来越明显，而且端也是越来越多
简单点来说前端
 传统的PC Web网页，虽然现在移动端盛行，但是例如企业官网、协同工作、网上商城、资讯类网站仍然需要一个传统的的WEB网站 iOS、Android手机类App，人类已经离不开手机了 移动端的H5，跨平台的解决方啊，因为小程序的出现破灭了 小程序，包括微信小程序和支付宝小程序，为了构建自己的商业闭环 快应用，各大手机厂商联合搞的，类似小程序。为了不被垄断  这么复杂的前端，导致了前后分离的越来越明显，后端越来越只提供API服务，前端SPA（单页应用）
前后联动 一个完整的软件用户体验就是
 用户操作 例如注册 反馈到到端 程序发起网络请求 DNS 网络请求通常都是域名访问、这一步会经过DNS解析拿到真实的IP地址。当然了直接写IP也行。 通常来说这一步几乎不存在性能瓶颈DNS会有缓存，这一步的瓶颈更多的是网络延迟。这一步的优化更多的是选择一个好的DNS服务商，节点更多、延迟更低，服务更稳定。目前来说免费的就够用了 API Gateway API网关，各大云服务商都有提供LBS，就我个人来说，必要性不是很大。如果说API流量很大，那么LBS目前的定制化功能是不够的，大公司一般会弄自己的LBS。对于小项目来说nginx足以。nginx也不会是性能的瓶颈，单机几百万并发。搞两个做备份绝大多数需求都能满足了 Micro Service 微服务，目前后端的趋势向微服务或Server Less方向发展。微服务的两大好处就是高可用和解决糅合。为啥子呢？高可用的意思就是其中一个服务挂了其他的要正常。保证不全面崩溃。解决糅合就是开发上协作分工，更快交付 Server Less 目前比较新的概念，无服务开发模式。啥意思？ 目前各大云服务厂商推出了各种云存储、云直播、云分析、云数据库。人们的开发模式发生了很大变化，不再购买服务器、不再购买带宽、不再自建数据库、不再购买磁盘。人们只需专注于产品本身。人们使用云服务厂商提供的API写程序。后来人们发现，既然我全部使用的是云，那么我干嘛程序不也用云呢。于是就诞生了如AMS Lambda这样的服务。但是这个概念太新，和云服务厂商绑定的太死，灵活度不够。目前来说还不太能大规模部署，但是可以小规模试用  那么问题来了，后端性能的瓶颈几乎就落在了microservice上面 首先从语言层面来说，参考The Computer Language Benchmarks Game]]></summary>
            
                <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>这篇文章主要讲目前我自己认为的最优化的性能解决方案</p>
<p>目前来说程序的前后分离越来越明显，而且端也是越来越多</p>
<p>简单点来说前端</p>
<ol>
<li>传统的PC Web网页，虽然现在移动端盛行，但是例如企业官网、协同工作、网上商城、资讯类网站仍然需要一个传统的的WEB网站</li>
<li>iOS、Android手机类App，人类已经离不开手机了</li>
<li>移动端的H5，跨平台的解决方啊，因为小程序的出现破灭了</li>
<li>小程序，包括微信小程序和支付宝小程序，为了构建自己的商业闭环</li>
<li>快应用，各大手机厂商联合搞的，类似小程序。为了不被垄断</li>
</ol>
<p>这么复杂的前端，导致了前后分离的越来越明显，后端越来越只提供API服务，前端SPA（单页应用）</p>
<h1 id="前后联动">前后联动</h1>
<p>一个完整的软件用户体验就是</p>
<ol>
<li>用户操作
例如注册</li>
<li>反馈到到端
程序发起网络请求</li>
<li>DNS
网络请求通常都是域名访问、这一步会经过DNS解析拿到真实的IP地址。当然了直接写IP也行。
通常来说这一步几乎不存在性能瓶颈DNS会有缓存，这一步的瓶颈更多的是网络延迟。这一步的优化更多的是选择一个好的DNS服务商，节点更多、延迟更低，服务更稳定。目前来说免费的就够用了</li>
<li>API Gateway
API网关，各大云服务商都有提供LBS，就我个人来说，必要性不是很大。如果说API流量很大，那么LBS目前的定制化功能是不够的，大公司一般会弄自己的LBS。对于小项目来说nginx足以。nginx也不会是性能的瓶颈，单机几百万并发。搞两个做备份绝大多数需求都能满足了</li>
<li>Micro Service
微服务，目前后端的趋势向微服务或Server Less方向发展。微服务的两大好处就是<em>高可用</em>和<em>解决糅合</em>。为啥子呢？高可用的意思就是其中一个服务挂了其他的要正常。保证不全面崩溃。解决糅合就是开发上协作分工，更快交付</li>
<li>Server Less
目前比较新的概念，无服务开发模式。啥意思？
目前各大云服务厂商推出了各种云存储、云直播、云分析、云数据库。人们的开发模式发生了很大变化，不再购买服务器、不再购买带宽、不再自建数据库、不再购买磁盘。人们只需专注于产品本身。人们使用云服务厂商提供的API写程序。后来人们发现，既然我全部使用的是云，那么我干嘛程序不也用云呢。于是就诞生了如AMS Lambda这样的服务。但是这个概念太新，和云服务厂商绑定的太死，灵活度不够。目前来说还不太能大规模部署，但是可以小规模试用</li>
</ol>
<h2 id="那么问题来了后端性能的瓶颈几乎就落在了microservice上面">那么问题来了，后端性能的瓶颈几乎就落在了microservice上面</h2>
<p>首先从语言层面来说，参考<a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/">The Computer Language Benchmarks Game</a></p>
<ul>
<li>性能的第一档C、C++。</li>
</ul>
<p>性能确实足够优秀，你也找不到更好的语言了。但是并不太适合microservice的开发。开发效率和工具链都不太适合，只能开发一些核心业务。</p>
<ul>
<li>性能第二档Rust、Go、Swift</li>
</ul>
<p>这三个语言都是比较新，对人类比较友好的语言。</p>
<p>Rust比较像C++，说实话过于复杂了，性能接近C、C++等原生语言。目前来说网络框架和库比较少。更多的是开发一些系统级的应用，过高的复杂度在开发效率上也得不到保证。</p>
<p>Go比较简单，接近C的语法，各种网络框架和库层出不穷。比较适合微服务的开发</p>
<p>Swift苹果出品，语法上我觉得比较接近scala。目前来说也是网络框架和库比较少，更多还是开发iOS应用</p>
<ul>
<li>性能第三档Java、C#</li>
</ul>
<p>Java目前使用最广泛的语言，框架和库数不胜数。JVM经过多年优化性能大概是C的一半。缺点就是比较吃内存，而且GC也十个问题。适合开发大型项目</p>
<p>C#性能上来说和Java差不多，但是框架和库相对Java来说是比较少的。没有Java活跃</p>
<ul>
<li>性能第四档JavaScript、TypeScript</li>
</ul>
<p>本来JS应该属于第五档的语言，可是在V8加持下的Node天然的并发特性，使得它的性能和并发都能契合到微服务的开发上来</p>
<ul>
<li>性能第五档PHP、Python、Ruby</li>
</ul>
<p>PHP近些年受到HHVM、PHP7的影响，性能有了大幅度的提升。但还是不够，这是语言特性受限。还是比较适合开发传统网站</p>
<p>Python的性能甚至不如PHP，还是适合当工具语言使用</p>
<p>Ruby和Python差不多，2.0以后性能有了些提升，但是和PHP一样，开发网站的利器。</p>
<p>总的来说，第五档的语言由于性能的关系，都不太适合开发微服务。</p>
<h2 id="抉择1">抉择1</h2>
<p>优先选择Go</p>
<p>优点：语法简单、天然并发、性能高、社区成熟
缺点： 缺点就是Go还是不够普及、学习成本还是有的</p>
<p>其次选择Java</p>
<p>优点：成熟的框架和库，门槛低、简单易学、适合团队写作
缺点：GC的延迟、比较吃内存，性能还是比Java差一点，但是不多，能接受</p>
<p>再次选择TypeScript</p>
<p>优点：JavaScript加强版，完全兼容js缺摒弃了js的一些缺点，成熟的社区、高并发，前后端通用
缺点：性能比Go和Java要差的多，大概有几倍的差距</p>
<p>综合看来，我的抉择也是大势所趋。</p>
<p>Java已经有20多年的历史了，经久不衰，经过了时间的考验，近年来高居各大语言排行榜第一名。都说Java已死，目前看来再活个10年完全没有问题</p>
<p>Go自从2009年推出以后就蓬勃发展，很多重量级应用都是Go写的。背后也有谷歌的推动。在中国几乎成为了主流语言</p>
<p>TypeScript微软出品，JS多年来被人诟病，但是即使这样前端也被JS一统天下，当没有缺点的JS【TypeScript】，彻底的统一前后端</p>
<h2 id="抉择2">抉择2</h2>
<p>脱离了语言那就是框架了，参考<a href="http://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=json&amp;l=hr9njz&amp;a=2">Web Framework Benchmarks</a></p>
<h3 id="json-serialization">JSON serialization</h3>
<p>在JSON serialization测试环节中前十名都是Java的项目，可见Java20年的沉淀，弄出了多少优秀的框架</p>
<p>Go的fasthttp排在13名，但是性能差别不大，能达到第一名的80%</p>
<p>Js的表现差一些排在23名，但是性能也能达到第一名的44%。这个性能的差距完全是语言本身的性能差距</p>
<p>当然这个测试的意义对于微服务来说更多体现在框架的IO性能和JSON的序列化性能</p>
<h3 id="single-query">Single query</h3>
<p>这个是单次查询，在实际的测试中肯定是要和数据库交互的，那么这个测试的参考意义还是很大的</p>
<p>这个要做一些删选<a href="http://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=db&amp;l=hr9njz&amp;a=2&amp;o=3"></a></p>
<p>排第一的是Java的vertx，go的fasthttp排在第三，能达到第一名的63%，我个人认为这个差距可能是一些实现细节的差距，Js就比较惨了排到了28名，而且只有第一名性能的26%。</p>
<h3 id="multiple-queries">Multiple queries</h3>
<p>在实际的业务中单次查询是解决不了问题的</p>
<p>排第一的还是vertx，够排在第四，能达到第一名的60%，js只能达到20%</p>
<p>后面的结果都差不多</p>
<p>其实go的性能和java应该算是旗鼓相当。js比较惨的原因可能就是语言性能本身的差距</p>
<p>目前看来Java的可选框架还是比较多的</p>
<p>底层基于Netty和Undertow的性能都不会差，可选的有Spring Framework、Act Framework、rapidoid、vertx</p>
<p>Go来说的话fasthttp一骑绝尘</p>
<p>JS可选业挺多的express、koa、restify</p>
<h2 id="db">DB</h2>
<p>在微服务中、最终落地还是需要喝数据库打交道</p>
<h2 id="sql">SQL</h2>
<h3 id="mysql-vs-postgresql">MySQL vs PostgreSQL</h3>
<p>传统关系型数据库来说就两个选择mysql和postgresql。这两者的性能相当。就更广泛的通用性来说选择mysql比较好。之前就有人得出结论web服务用mysql，分析用postgresql。简单点来说如果你的微服务是面向大众用户的话选择mysql。如果内部使用选择PostgreSQL</p>
<h2 id="nosql">NoSQL</h2>
<h3 id="redis-vs-memcache">Redis vs Memcache</h3>
<p>memcache是个纯缓存数据库，redis不仅可以做缓存还可以持久化</p>
<p>目前来说redis发展迅猛。个人感觉没有必要在新项目中使用memcache</p>
<h3 id="mongodb">MongoDB</h3>
<p>这个似乎没得选</p>
<p>具体业务中使用哪种数据库根据业务类型来判断</p>
<h2 id="rpc-vs-rustful">RPC vs RUSTful</h2>
<p>内部服务建议使用RPC达到最高性能</p>
<p>rpc框架还是比较多的这里比较推荐谷歌开源的gRPC和Facebook开源的thrift，其他的都不推荐，第一是不跨语言，第二就是国内的开源的尿性，要么开源了不维护，要么只开源一部分藏着掖着</p>
<p>对外服务建议使用RESTful达到最广泛的通用性</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/java/" term="Java" label="Java" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/typescript/" term="TypeScript" label="TypeScript" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Go Web Framework比较</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/9/" />
            <id>https://example.com/posts/9/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-29T14:46:07+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[前言 Go语言诞生快十年了，已经不能说是一门新语言了。现在涌现出来出来非常多的Web框架。今天就选取其中几个来比较一下
今天选取的是三个FullStack框架，也就是啥都能干的框架
beego 这个是国产的开源框架
先来看看怎么启动的
主程序
1 2 3 4 5 6 7 8 9 10 11 12 13 14  package main import ( &#34;hello/controllers&#34; &#34;github.com/astaxie/beego&#34; ) func main() { beego.BConfig.RunMode = &#34;prod&#34; beego.Router(&#34;/json&#34;, &amp;controllers.JsonController{}) beego.Router(&#34;/plaintext&#34;, &amp;controllers.PlaintextController{}) beego.Run() }   主程序主要是设置配置，配置路由和启动服务]]></summary>
            
                <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>Go语言诞生快十年了，已经不能说是一门新语言了。现在涌现出来出来非常多的Web框架。今天就选取其中几个来比较一下</p>
<p>今天选取的是三个FullStack框架，也就是啥都能干的框架</p>
<h1 id="beego">beego</h1>
<p>这个是国产的开源框架</p>
<p>先来看看怎么启动的</p>
<p>主程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;hello/controllers&#34;</span>

	<span class="s">&#34;github.com/astaxie/beego&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">beego</span><span class="p">.</span><span class="nx">BConfig</span><span class="p">.</span><span class="nx">RunMode</span> <span class="p">=</span> <span class="s">&#34;prod&#34;</span>
	<span class="nx">beego</span><span class="p">.</span><span class="nf">Router</span><span class="p">(</span><span class="s">&#34;/json&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">controllers</span><span class="p">.</span><span class="nx">JsonController</span><span class="p">{})</span>
	<span class="nx">beego</span><span class="p">.</span><span class="nf">Router</span><span class="p">(</span><span class="s">&#34;/plaintext&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">controllers</span><span class="p">.</span><span class="nx">PlaintextController</span><span class="p">{})</span>
	<span class="nx">beego</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>主程序主要是设置配置，配置路由和启动服务</p>
<p>控制器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">controllers</span>

<span class="kd">type</span> <span class="nx">PlaintextController</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Base</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">helloWorldString</span> <span class="p">=</span> <span class="s">&#34;Hello, World!&#34;</span>

<span class="kd">var</span> <span class="p">(</span>
	<span class="nx">helloWorldBytes</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">helloWorldString</span><span class="p">)</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">PlaintextController</span><span class="p">)</span> <span class="nf">Get</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">Ctx</span><span class="p">.</span><span class="nx">Output</span><span class="p">.</span><span class="nf">Header</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;text/plain&#34;</span><span class="p">)</span>
	<span class="nx">c</span><span class="p">.</span><span class="nx">Ctx</span><span class="p">.</span><span class="nx">Output</span><span class="p">.</span><span class="nf">Body</span><span class="p">(</span><span class="nx">helloWorldBytes</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>控制器负责处理请求</p>
<p>整体看下来，封装的应该比较简洁，但是ctx这块感觉不太雅观</p>
<h1 id="revel">revel</h1>
<p>revel比较像Java和Scala的Play Framework</p>
<p>revel这个框架封装的比较深，看官方的例子需要使用提供的<em>revel</em>命令行才能使用，虽然beego也提供了bee工具，但是也可以不使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 下载库</span>
go get github.com/revel/revel
<span class="c1"># 安装命令行</span>
go get github.com/revel/cmd/revel
<span class="c1"># 导出到环境变量</span>
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$PATH</span><span class="s2">:</span><span class="nv">$GOPATH</span><span class="s2">/bin&#34;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">~
~ revel! http://revel.github.io
~
usage: revel <span class="nb">command</span> <span class="o">[</span>arguments<span class="o">]</span>

The commands are:

    new         create a skeleton Revel application
    run         run a Revel application
    build       build a Revel application <span class="o">(</span>e.g. <span class="k">for</span> deployment<span class="o">)</span>
    package     package a Revel application <span class="o">(</span>e.g. <span class="k">for</span> deployment<span class="o">)</span>
    clean       clean a Revel application<span class="err">&#39;</span>s temp files
    <span class="nb">test</span>        run all tests from the command-line
    version     displays the Revel Framework and Go version

</code></pre></td></tr></table>
</div>
</div><p>先新建一个项目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">revel new demo
revel run demo
</code></pre></td></tr></table>
</div>
</div><p>然后访问http://localhost:9000</p>
<p>这样看revel使用起来比较方便</p>
<p>路由是在单独的文件里面配置的，在/conf/routes，然后revel会自动生成routers.go</p>
<pre><code class="language-conf" data-lang="conf"># Routes Config
#
# This file defines all application routes (Higher priority routes first)
#

module:testrunner
# module:jobs


GET     /                                       App.Index

# Ignore favicon requests
GET     /favicon.ico                            404

# Map static resources from the /app/public folder to the /public path
GET     /public/*filepath                       Static.Serve(&quot;public&quot;)

# Catch all, this will route any request into the controller path
#
#                    **** WARNING ****
# Enabling this exposes any controller and function to the web.
# ** This is a serious security issue if used online **
#
# For rapid development uncomment the following to add new controller.action endpoints
# without having to add them to the routes table.
# *       /:controller/:action                    :controller.:action
</code></pre><p>真正的处理请求在app.go</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">controllers</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;github.com/revel/revel&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">App</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="o">*</span><span class="nx">revel</span><span class="p">.</span><span class="nx">Controller</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">App</span><span class="p">)</span> <span class="nf">Index</span><span class="p">()</span> <span class="nx">revel</span><span class="p">.</span><span class="nx">Result</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Render</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>封装的确实比较深了，但是开发起来会很方便，就是自定义话成都不高</p>
<h1 id="aah">aah</h1>
<p>安装工具</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go get -u aahframework.org/tools.v0/aah

aah

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
           aah framework v0.10 - https://aahframework.org           
____________________________________________________________________
<span class="c1"># Report improvements/bugs at https://github.com/go-aah/aah/issues #</span>

Usage:
  aah <span class="o">[</span>global options<span class="o">]</span> <span class="nb">command</span> <span class="o">[</span><span class="nb">command</span> options<span class="o">]</span> <span class="o">[</span>arguments...<span class="o">]</span>

Commands:
  new, n          Create new aah <span class="s1">&#39;web&#39;</span> or <span class="s1">&#39;api&#39;</span> application <span class="o">(</span>interactive<span class="o">)</span>
  run, r          Run aah framework application <span class="o">(</span>supports hot-reload<span class="o">)</span>
  build, b        Build aah application <span class="k">for</span> deployment
  list, l         List all aah projects in GOPATH
  clean, c        Cleans the aah generated files and build directory
  switch, s       Switch between aah release and edge version
  update, u       Update your aah to the latest release version on your GOPATH
  generate, g     Generates boilerplate code, configurations, complement scripts <span class="o">(</span>systemd, docker<span class="o">)</span>, etc.
  help, h         Shows a list of commands or <span class="nb">help</span> <span class="k">for</span> one <span class="nb">command</span>

Global Options:
  -h, --help     show <span class="nb">help</span>
  -v, --version  print aah framework version and go version

</code></pre></td></tr></table>
</div>
</div><p>这三个框架都提供了命令行工具，方便了开发部署</p>
<p>aah也是通过配置文件来配置路由</p>
<p>config/routes.conf</p>
<pre><code class="language-conf" data-lang="conf">routes {
...
      #------------------------------------------------------
      # Pick an unique name, it's called `route name`,
      # used for reverse URL.
      #------------------------------------------------------
      index {
        # path is used to match incoming requests
        # It can contain `:name` - Named parameter and
        # `*name` - Catch-all parameter
        path = &quot;/&quot;

        # HTTP method mapping, It can be multiple `HTTP` methods with comma separated
        # Default value is `GET`, it can be lowercase or uppercase
        #method = &quot;GET&quot;

        # The controller to be called for mapped URL path.
        #   * `controller` attribute supports with or without package prefix. For e.g.: `v1/User` or `User`
        #   * `controller` attribute supports both naming conventions. For e.g.: `User` or `UserController`
        controller = &quot;AppController&quot;
...
</code></pre><p>控制类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">controllers</span>

<span class="kn">import</span> <span class="p">(</span>
  <span class="s">&#34;aahframework.org/aah.v0&#34;</span>
  <span class="s">&#34;sample/app/models&#34;</span>
<span class="p">)</span>

<span class="c1">// AppController struct application controller
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">AppController</span> <span class="kd">struct</span> <span class="p">{</span>
  <span class="o">*</span><span class="nx">aah</span><span class="p">.</span><span class="nx">Context</span>
<span class="p">}</span>

<span class="c1">// Index method is application home page.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="nx">AppController</span><span class="p">)</span> <span class="nf">Index</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">data</span> <span class="o">:=</span> <span class="nx">aah</span><span class="p">.</span><span class="nx">Data</span><span class="p">{</span>
    <span class="s">&#34;Greet&#34;</span><span class="p">:</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Greet</span><span class="p">{</span>
      <span class="nx">Message</span><span class="p">:</span> <span class="s">&#34;Welcome to aah framework - Web Application&#34;</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">}</span>

  <span class="nx">a</span><span class="p">.</span><span class="nf">Reply</span><span class="p">().</span><span class="nf">Ok</span><span class="p">().</span><span class="nf">HTML</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h1 id="benchmark">Benchmark</h1>
<p>这是一个第三方的测试结果</p>
<p>|Web Framework|JSON|Plaintext
|-|-|
|beego|334640|638004
|revel|249814|215532
|aah|181207|215532</p>
<p>从表格中可以看出beego的性能是最好的，不过几个框架的性能差别都不算特别大，性能也不是选择这几个框架的主要原因</p>
<h1 id="总结">总结</h1>
<h2 id="共同点">共同点</h2>
<ol>
<li>三个框架都是Fullstack框架，提供一站式解决方案</li>
<li>都提供了工具开发、测试、部署，但revel和aah集成度似乎更高，不能单独使用</li>
<li>性能方面相差不大，而且单机查询性能也能上十万，应该不会是瓶颈。go的性能还是有保障的</li>
</ol>
<h2 id="不同点">不同点</h2>
<ol>
<li>beego类似传统的mvc框架</li>
<li>revel和aah比较类似，都学的play framework</li>
</ol>
<h2 id="选择推荐">选择推荐</h2>
<ol>
<li>既然选择全栈开发框架，显然是为了满足展开发效率，beego是国人开发具有较好的中文文档，英文不太好的首选beego、</li>
<li>revel提供了更为彻底的一站式解决方案，而且也比较成熟，推荐选择</li>
<li>aah应该来说算是后起之秀，截止本文撰写之日在Github只有304个starts。比较适合尝鲜</li>
</ol>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/beego/" term="beego" label="beego" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/revel/" term="revel" label="revel" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/aah/" term="aah" label="aah" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/go/" term="Go" label="Go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用Spring Data REST</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/8/" />
            <id>https://example.com/posts/8/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-19T22:55:33+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[介绍 Spring Data REST是个快速构建REST服务的脚手架，这里整个项目是基于Spring Boot的
下载依赖 1 2 3 4 5 6 7 8 9 10  &lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;&lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependencies&gt;  实体类映射 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  package com.]]></summary>
            
                <content type="html"><![CDATA[<h2 id="介绍">介绍</h2>
<p><em>Spring Data REST</em>是个快速构建REST服务的脚手架，这里整个项目是基于Spring Boot的</p>
<h2 id="下载依赖">下载依赖</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependencies&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.data<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-rest<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependencies&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="实体类映射">实体类映射</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.OneToMany</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="配置数据dao">配置数据DAO</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.rest.core.annotation.RepositoryRestResource</span><span class="o">;</span>

<span class="nd">@RepositoryRestResource</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="crud">CRUD</h2>
<h3 id="对于集合资源">对于集合资源</h3>
<p>GET 返回资源，通过page、size和sort来控制返回的数据
POST 创建一个新的资源
HEAD 资源是否可用</p>
<p>除了这些外，其他请求都不支持</p>
<h3 id="对于单个资源">对于单个资源</h3>
<p>GET 返回单个资源
HEAD 返回资源是否可用
PUT 替换资源
PATCH 部分更新资源
DELETE 删除资源</p>
<h3 id="对于关联的资源">对于关联的资源</h3>
<p>GET 获取资源</p>
<h3 id="create">Create</h3>
<p>新建使用POST</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X POST <span class="se">\</span>
  http://localhost:8080/students <span class="se">\</span>
  -H <span class="s1">&#39;Cache-Control: no-cache&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Postman-Token: 01b18db0-58a2-4315-8df3-0f783f8d13d0&#39;</span> <span class="se">\</span>
  -d <span class="s1">&#39;{
</span><span class="s1">	&#34;name&#34;: &#34;Jobs&#34;
</span><span class="s1">}&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="read">Read</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">读取采用GET
curl -X GET http://localhost:8080/students

curl -X GET http://localhost:8080/students/1
</code></pre></td></tr></table>
</div>
</div><h3 id="update">Update</h3>
<p>更新使用PUT</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X PUT <span class="se">\</span>
  http://localhost:8080/students/1 <span class="se">\</span>
  -H <span class="s1">&#39;Cache-Control: no-cache&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Postman-Token: 0b4029f6-42ba-4c79-9c31-b2f1cb884898&#39;</span> <span class="se">\</span>
  -d <span class="s1">&#39;{
</span><span class="s1">	&#34;name&#34;: &#34;James&#34;
</span><span class="s1">}&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="delete">Delete</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X DELETE <span class="se">\</span>
  http://localhost:8080/students/1 <span class="se">\</span>
  -H <span class="s1">&#39;Cache-Control: no-cache&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\</span>
  -H <span class="s1">&#39;Postman-Token: c13c0395-eb18-4b43-b16f-8cea06f5f0b0&#39;</span> <span class="se">\</span>
  -d <span class="s1">&#39;{
</span><span class="s1">	&#34;name&#34;: &#34;James&#34;
</span><span class="s1">}&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="对于关联资源的crud">对于关联资源的CRUD</h2>
<p>这个是被关联的资源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.OneToMany</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Teacher</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p>这事包含关联资源的类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.LastModifiedDate</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@Version</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">version</span><span class="o">;</span>
    <span class="nd">@LastModifiedDate</span>
    <span class="kd">private</span> <span class="n">Date</span> <span class="n">date</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@OneToMany</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Teacher</span><span class="o">&gt;</span> <span class="n">teachers</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.example.demo</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.OneToMany</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Data</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Teacher</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="create-1">Create</h3>
<ol>
<li>先插入两个教师</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X POST http://localhost:8080/teachers -d <span class="s1">&#39;{ &#34;name&#34;: &#34;James Hadden&#34; }&#39;</span>
curl -X POST http://localhost:8080/teachers -d <span class="s1">&#39;{ &#34;name&#34;: &#34;Crise Pual&#34; }&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>教师的ID分别为1， 2</p>
<ol start="2">
<li>新建学生</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X POST http://localhost:8080/students -d <span class="s1">&#39;{ &#34;name&#34;: &#34;James Hadden&#34;, &#34;teachers&#34;: [
</span><span class="s1">  &#34;http://localhost:8080/teachers/1&#34;, &#34;http://localhost:8080/teachers/1&#34;
</span><span class="s1">] }&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候会新建成功，并且教师的信息也会关联到学生上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -X POST http://localhost:8080/students -d <span class="s1">&#39;{ &#34;name&#34;: &#34;James Hadden&#34;, &#34;teachers&#34;: [
</span><span class="s1">  &#34;http://localhost:8080/teachers/1&#34;, &#34;http://localhost:8080/teachers/1&#34;
</span><span class="s1">] }&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们再次插入学生信息，这个时候数据库就会报错了，因为@OneToMany注解是一个教师只能属于一个学生。这个时候注解应该改为@ManyToMany，这个时候就能插入了</p>
<h3 id="update-1">Update</h3>
<p>未完待续！</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/spring/" term="Spring" label="Spring" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/data/" term="data" label="data" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/rest/" term="rest" label="rest" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用Rancher2.0快速构建Kubernetes</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/7/" />
            <id>https://example.com/posts/7/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-16T22:55:33+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[前言 上一篇使用的是Rancher1.6构建的k8s，但是现在Rancher出新版了，并且好像只支持K8s了，看来k8s确实一统天下了
环境准备 Rancher 2.0 推荐使用Ubuntu 16.04构建，其他的好像支持的不是太好，然后节点最好也是Ubuntu 16.04，而且Docker的版本最高也才支持到17.03。
所以我们需要以下服务器资源：
 一台安装了Docker 17.03.2的Ubuntu 16.04主机，用来安装Rancher Server 2.0。内存要大于等于4G，不然很可能跑不起来 三台Ubuntu16.04主机，这个一般使用API自动安装  开始   启动一个Ubuntu 16.04虚拟主机
  远程到虚拟主机
  这里用户名又是root了，根据镜像和云服务提供商可能有所不同，这里我用的还是DigitalOcean，这是我的优惠码http://www.digitalocean.com/?refcode=f439670561f1
1  ssh root@&lt;server-ip&gt;  安装Docker  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 安装依赖sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common# 添加GPGcurl -fsSL https://download.]]></summary>
            
                <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>上一篇使用的是Rancher1.6构建的k8s，但是现在Rancher出新版了，并且好像只支持K8s了，看来k8s确实一统天下了</p>
<h2 id="环境准备">环境准备</h2>
<p>Rancher 2.0 推荐使用Ubuntu 16.04构建，其他的好像支持的不是太好，然后节点最好也是Ubuntu 16.04，而且Docker的版本最高也才支持到17.03。</p>
<p>所以我们需要以下服务器资源：</p>
<ol>
<li>一台安装了Docker 17.03.2的Ubuntu 16.04主机，用来安装Rancher Server 2.0。内存要大于等于4G，不然很可能跑不起来</li>
<li>三台Ubuntu16.04主机，这个一般使用API自动安装</li>
</ol>
<h2 id="开始">开始</h2>
<ol>
<li>
<p>启动一个Ubuntu 16.04虚拟主机</p>
</li>
<li>
<p>远程到虚拟主机</p>
</li>
</ol>
<p>这里用户名又是root了，根据镜像和云服务提供商可能有所不同，这里我用的还是DigitalOcean，这是我的优惠码http://www.digitalocean.com/?refcode=f439670561f1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ssh root@&lt;server-ip&gt;
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>安装Docker</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">
<span class="c1"># 安装依赖</span>
sudo apt-get install <span class="se">\</span>
    apt-transport-https <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    software-properties-common
<span class="c1"># 添加GPG</span>
curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo apt-key add -
<span class="c1"># 验证GPG</span>
sudo apt-key fingerprint 0EBFCD88
<span class="c1"># 添加源</span>
sudo add-apt-repository <span class="se">\</span>
   <span class="s2">&#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
</span><span class="s2">   </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> \
</span><span class="s2">   stable&#34;</span>
<span class="c1"># 更新源</span>
sudo apt-get update
<span class="c1"># 查看可用版本</span>
apt-cache madison docker-ce
<span class="c1"># 安装版本，这里推荐17.03.2</span>
sudo apt-get install docker-ce<span class="o">=</span>&lt;VERSION&gt;
</code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>安装Rancher 2.0</li>
</ol>
<p>这里绑定了443端口，也就是开启了https，我没试过不用行不行，如果用了，会被浏览器不信任，添加为信任即可访问了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo docker run -d --restart<span class="o">=</span>unless-stopped -p 80:80 -p 443:443 rancher/rancher
</code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>访问https://<code>&lt;server-ip&gt;</code></li>
</ol>
<p>安装好以后，应该长这个样子，第一次进去会让你输入一个管理员密码的</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180615205938.png" alt=""></p>
<ol start="6">
<li>新建集群</li>
</ol>
<p>选择一个你的云主机提供商，我这里是DigitalOcean</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152059381.png" alt=""></p>
<p>新建主机池，这里推荐三个，功能的话全部勾选吧</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152059382.png" alt=""></p>
<ol>
<li>etcd是个分布式的kv数据库，用来同步集群信息的，这里叫做数据平面</li>
<li>Control是无状态的集群，负责管理集群的，这里叫编排平面</li>
<li>Worker是工作集群，也就是你的应用和服务部署的集群，这里叫计算平面</li>
</ol>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152059383.png" alt=""></p>
<ol start="7">
<li>集群建好后，默认会进入名为default的命名空间</li>
</ol>
<p>这个是集群面板，看上去还蛮好看的</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180615213919.png" alt=""></p>
<p>忘了说了，默认进去是英文界面，这里可以切换到中文</p>
<ol start="8">
<li>新建一个工作负载</li>
</ol>
<p>这里选用nginx，因为比较简单，部署2个实例</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152132241.png" alt=""></p>
<ol start="9">
<li>新建一个负债均衡</li>
</ol>
<p>这里选择自动生成一个主机名，因为我们还没有启用dns，除非直接使用IP访问，不然访问不到的，xip.io相当于一个免费的域名和dns服务</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152132242.png" alt=""></p>
<ol start="10">
<li>访问</li>
</ol>
<p>等个差不多一分钟，分派好IP以后，就可以直接外网访问了</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806152132244.png" alt=""></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/rancher/" term="Rancher" label="Rancher" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/rancher/" term="Rancher" label="Rancher" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/kubernetes/" term="Kubernetes" label="Kubernetes" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/digitalocean/" term="DigitalOcean" label="DigitalOcean" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用Rancher快速构建Kubernetes</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/6/" />
            <id>https://example.com/posts/6/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-15T22:55:33+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[前言 最近在玩Kubernetes，时下最火的容器编排工具，国内外三大云计算平台AWS、Google、Aurze 国内阿里、腾讯、百度无不支持。可以说已经成为了容器编排领域的事实标准了，现在再搞别的纯属浪费时间。可惜Kubernetes这玩意太复杂，要先玩转先得理解其概念，可能大半天就过去了。
踩坑 官网提供minikube的mini单机kube安装方式，首先这玩意在我的windows下不太支持，包括在win10下的linux子系统也不行 其次在我的老款macbook pro下也安装不了，还一个问题，这是个单机版的，无法体验其所有特性，所以放弃了
官网还提供了个多节点的部署方式，但是一看说明文档，现在只是实验性支持，瞬间没了兴趣，坑太多不敢踩。 无意中看到了Rancher这个神器，几乎全程自动安装不需要敲键盘。
开始 这里我使用的DigitalOcean云服务，这里不太推荐在本地环境安装k8s，第一安装一个k8s最少需要四台虚拟机或者服务器，每台机器不低于1GB的内存，而且如果使用Rancher的形式安装，那么可能内存不低于2GB，而且本机环境或者本地虚拟机需要解决硬件和网络问题
所以选择云计算。这里我推荐DigitalOcean，现在注册并认证信用卡就送100美元，有效期2个月。如果没有这个优惠了，可以用我的邀请码，送10美元http://www.digitalocean.com/?refcode=f439670561f1
理论上其他的云服务提供商也是可以的，但是如果是国内的服务器，需要解决网络的问题。推荐走阿里的镜像
 先搞一台机器安装Rancher OS，配置最低2GB内存。不然可能跑不起来  Rancher OS是一个比较纯净的系统，里面自带Docker。理论上安装Ubuntu 16.04也可以的，只是需要自己安装Docker。而且对版本可能也有要求需要17.03
选择镜像
选择规格
然后进入Rancher OS，注意ssh进入的时候用户名是rancher，不然进不去  远程登陆
1  ssh rancher@&lt;server-ip&gt;  安装Rancher Server  这里8080端口也可以改为其他端口，国内的运营商可能需要备案才能访问80，443，8080，这个时候可以改为其他端口
1  sudo docker run -d --restart=unless-stopped -p 8080:8080 rancher/server:stable  等待安装成功]]></summary>
            
                <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近在玩<code>Kubernetes</code>，时下最火的容器编排工具，国内外三大云计算平台<code>AWS</code>、<code>Google</code>、<code>Aurze</code>
国内<code>阿里</code>、<code>腾讯</code>、<code>百度</code>无不支持。可以说已经成为了容器编排领域的事实标准了，现在再搞别的纯属浪费时间。可惜<code>Kubernetes</code>这玩意太复杂，要先玩转先得理解其概念，可能大半天就过去了。</p>
<h2 id="踩坑">踩坑</h2>
<p>官网提供minikube的mini单机kube安装方式，首先这玩意在我的windows下不太支持，包括在win10下的linux子系统也不行
其次在我的老款macbook pro下也安装不了，还一个问题，这是个单机版的，无法体验其所有特性，所以放弃了</p>
<p>官网还提供了个多节点的部署方式，但是一看说明文档，现在只是实验性支持，瞬间没了兴趣，坑太多不敢踩。
无意中看到了Rancher这个神器，几乎全程自动安装不需要敲键盘。</p>
<h2 id="开始">开始</h2>
<p>这里我使用的DigitalOcean云服务，这里不太推荐在本地环境安装k8s，第一安装一个k8s最少需要四台虚拟机或者服务器，每台机器不低于1GB的内存，而且如果使用Rancher的形式安装，那么可能内存不低于2GB，而且本机环境或者本地虚拟机需要解决硬件和网络问题</p>
<p>所以选择云计算。这里我推荐DigitalOcean，现在注册并认证信用卡就送100美元，有效期2个月。如果没有这个优惠了，可以用我的邀请码，送10美元http://www.digitalocean.com/?refcode=f439670561f1</p>
<p>理论上其他的云服务提供商也是可以的，但是如果是国内的服务器，需要解决网络的问题。推荐走阿里的镜像</p>
<ol>
<li>先搞一台机器安装Rancher OS，配置最低2GB内存。不然可能跑不起来</li>
</ol>
<p>Rancher OS是一个比较纯净的系统，里面自带Docker。理论上安装Ubuntu 16.04也可以的，只是需要自己安装Docker。而且对版本可能也有要求需要17.03</p>
<p>选择镜像</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180615164233.png" alt=""></p>
<p>选择规格</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642331.png" alt=""></p>
<ol start="2">
<li>然后进入Rancher OS，注意ssh进入的时候用户名是rancher，不然进不去</li>
</ol>
<p>远程登陆</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ssh rancher@&lt;server-ip&gt;
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>安装Rancher Server</li>
</ol>
<p>这里8080端口也可以改为其他端口，国内的运营商可能需要备案才能访问80，443，8080，这个时候可以改为其他端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo docker run -d --restart<span class="o">=</span>unless-stopped -p 8080:8080 rancher/server:stable
</code></pre></td></tr></table>
</div>
</div><p>等待安装成功</p>
<ol start="4">
<li>安装成功后进入浏览器输入http://<server-ip>:8080</li>
</ol>
<p>第一次加载可能有点慢，耐心等待</p>
<ol start="5">
<li>然后点击环境管理，添加Kubernetes环境，这个时候需要添加主机，这里最少添加三个主机，不然kubernetes dashboard打不开</li>
</ol>
<p>添加环境</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642332.png" alt=""></p>
<p>选择k8s</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642333.png" alt=""></p>
<ol start="6">
<li>三个主机添加好以后，就可以进入UI界面了</li>
</ol>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642334.png" alt=""></p>
<ol start="7">
<li>点击工作负载，开始部署一个应用</li>
</ol>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642335.png" alt=""></p>
<ol start="8">
<li>这里先部署一个nginx应用，设置三个副本，对外暴露端口80</li>
</ol>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642336.png" alt=""></p>
<ol start="9">
<li>等待几分钟后进入overview界面打开链接，这个时候可以看到这个，说明nginx已经成功启动并可以对外提供服务</li>
</ol>
<p>进入overview</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642337.png" alt=""></p>
<p>点击链接</p>
<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_201806151642338.png" alt=""></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/rancher/" term="Rancher" label="Rancher" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/rancher/" term="Rancher" label="Rancher" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/kubernetes/" term="Kubernetes" label="Kubernetes" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/digitalocean/" term="DigitalOcean" label="DigitalOcean" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Brainfuck语言解释器的Java实现</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/1/" />
            <id>https://example.com/posts/1/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2018-06-01T20:14:23+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[我们先来看看Brainfuck的定义：
Müller的目标是创建一种简单的、可以用最小的编译器来实现的、匹配图灵完全思想的编程语言。这种语言由八种运算符构成，为Amiga机器编写的编译器（第二版）只有240个字节大小。
就象它的名字所暗示的，brainfuck程序很难读懂。尽管如此，brainfuck图灵机一样可以完成任何计算任务。虽然brainfuck的计算方式如此与众不同，但它确实能够正确运行。
          字符 含义     &gt; 指针加一   &lt; 指针减一   + 指针指向的字节的值加一   - 指针指向的字节的值减一   . 输出指针指向的单元内容（ASCII码）   , 输入内容到指针指向的单元（ASCII码）   [ 如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处   ] 如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处    这种语言基于一个简单的机器模型，除了指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针]]></summary>
            
                <content type="html"><![CDATA[<p>我们先来看看<strong>Brainfuck的定义：</strong></p>
<p>Müller的目标是创建一种简单的、可以用最小的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a>来实现的、匹配<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%AE%8C%E5%85%A8">图灵完全</a>思想的编程语言。这种语言由八种<a href="https://zh.wikipedia.org/w/index.php?title=%E8%BF%90%E7%AE%97%E7%AC%A6&amp;action=edit&amp;redlink=1">运算符</a>构成，为<a href="https://zh.wikipedia.org/wiki/Amiga">Amiga</a>机器编写的<a href="https://web.archive.org/web/20070313151559/http://wuarchive.wustl.edu/pub/aminet/dev/lang/brainfuck-2.lha">编译器（第二版）</a>只有240个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">字节</a>大小。</p>
<p>就象它的名字所暗示的，brainfuck程序很难读懂。尽管如此，brainfuck<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA">图灵机</a>一样可以完成任何计算任务。虽然brainfuck的计算方式如此与众不同，但它确实能够正确运行。</p>
<table>
<thead>
<tr>
<th align="left"></th>
</tr>
</thead>
</table>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>&gt;</code></td>
<td align="left">指针加一</td>
</tr>
<tr>
<td align="left"><code>&lt;</code></td>
<td align="left">指针减一</td>
</tr>
<tr>
<td align="left"><code>+</code></td>
<td align="left">指针指向的字节的值加一</td>
</tr>
<tr>
<td align="left"><code>-</code></td>
<td align="left">指针指向的字节的值减一</td>
</tr>
<tr>
<td align="left"><code>.</code></td>
<td align="left">输出指针指向的单元内容（ASCII码）</td>
</tr>
<tr>
<td align="left"><code>,</code></td>
<td align="left">输入内容到指针指向的单元（ASCII码）</td>
</tr>
<tr>
<td align="left"><code>[</code></td>
<td align="left">如果指针指向的单元值为零，向后跳转到对应的<code>]</code>指令的次一指令处</td>
</tr>
<tr>
<td align="left"><code>]</code></td>
<td align="left">如果指针指向的单元值不为零，向前跳转到对应的<code>[</code>指令的次一指令处</td>
</tr>
</tbody>
</table>
<p>这种语言基于一个简单的机器模型，除了指令，这个机器还包括：一个以字节为单位、被初始化为零的<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84">数组</a>、一个指向该数组的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88">指针</a></p>
<p>（初始时指向数组的第一个字节）、以及用于输入输出的两个字节流。</p>
<p>首先我们要有一个以字节为单位的数组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">byte</span><span class="o">[]</span> <span class="n">memory</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">10000</span><span class="o">];</span>
</code></pre></td></tr></table>
</div>
</div><p>这个就是通常计算机的内存，现在假设这个内存有10000长度那么大</p>
<p>然后我们需要一个指针：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">point</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化为0，也就是指向内存的第一个地址</p>
<p>这个语言的源代码只有8个字符，我们假定源码为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">source</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>现在我们要读取源码，我们需要一个辅助的属性index来标示我们读到了代码的第几个字符：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">index</span>
</code></pre></td></tr></table>
</div>
</div><p>然后我们来处理这些指令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="k">switch</span> <span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
    <span class="n">point</span><span class="o">++;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">;</span>
    <span class="n">point</span><span class="o">--;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">;</span>
    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]++;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">;</span>
    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]--;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;.&#39;</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]);</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">;</span>
    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
    <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其实前面6个指令都很简单，关键在于后面2个指令，这个两个指令实际上就是才是逻辑和循环，这其中的核心就是跳转，就是把源代码的指针index的值进行改变，而这个改变是有条件的，下面就是我对这个逻辑的实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="k">switch</span> <span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">while</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39;]&#39;</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">index</span><span class="o">++;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">while</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">&#39;[&#39;</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">index</span><span class="o">--;</span>
      <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其实就是用while循环来检查代码，然后改变index的值，乍一看好像没毛病，是的，如果是下面这个输出hello, world!的代码</p>
<pre><code>+++++ +++++             initialize counter (cell #0) to 10
[                       use loop to set the next four cells to 70/100/30/10
    &gt; +++++ ++              add  7 to cell #1
    &gt; +++++ +++++           add 10 to cell #2
    &gt; +++                   add  3 to cell #3
    &gt; +                     add  1 to cell #4
    &lt;&lt;&lt;&lt; -                  decrement counter (cell #0)
]
&gt; ++ .                  print 'H'
&gt; + .                   print 'e'
+++++ ++ .              print 'l'
.                       print 'l'
+++ .                   print 'o'
&gt; ++ .                  print ' '
&lt;&lt; +++++ +++++ +++++ .  print 'W'
&gt; .                     print 'o'
+++ .                   print 'r'
----- - .               print 'l'
----- --- .             print 'd'
&gt; + .                   print '!'
&gt; .                     print '\n'
</code></pre><p>确实没有毛病，但是对于下面这个乘法</p>
<pre><code> ,&gt;,,&gt;++++++++[&lt;------&lt;------&gt;&gt;-]
 &lt;&lt;[&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt;&lt;-]
 &gt;&gt;&gt;++++++[&lt;++++++++&gt;-],&lt;.&gt;.
</code></pre><p>就有问题了，因为这里面有个多重循环，如何界定“[”对应的“]”就不准确了，这才是整个程序的难点。</p>
<p>我们先来看看，如何理解对应这个意思，我的理解为：<strong>如果字符[]中间有n个[和n个]字符，那么他们是一对，n&gt;=0</strong></p>
<p>按照这个理论，我们开始写代码</p>
<p>先定义一个计数器，出现[就加1，出现]就减1，这和上面那个理解是一个意思，只不过简化为一个变量表示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在定义一个index移动的偏移量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后开始跳转</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// 起始偏移量为1，一直到代码结束
</span><span class="c1"></span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">index</span> <span class="o">+</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">offset</span><span class="o">++)</span> <span class="o">{</span>
  <span class="c1">// 找到跳转字符]且n相等，也就是count=0，计算index的值并跳出循环
</span><span class="c1"></span>  <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">index</span> <span class="o">+=</span> <span class="n">offset</span><span class="o">;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="o">)</span> <span class="n">count</span><span class="o">++;</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="n">count</span><span class="o">--;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下面是完整的代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.github.xiongdi.study</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrainfuckInterpreter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">memory</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">1000</span><span class="o">];</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">point</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span> <span class="n">source</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
                    <span class="n">point</span><span class="o">++;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
                    <span class="n">point</span><span class="o">--;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
                    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]++;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
                    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]--;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
                    <span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">index</span> <span class="o">+</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">offset</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">index</span> <span class="o">+=</span> <span class="n">offset</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="o">}</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="o">)</span> <span class="n">count</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="n">count</span><span class="o">--;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">memory</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">index</span> <span class="o">-</span> <span class="n">offset</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="n">offset</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">index</span> <span class="o">-=</span> <span class="n">offset</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="o">}</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="o">)</span> <span class="n">count</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="n">count</span><span class="o">--;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/java/" term="Java" label="Java" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/brainfuck/" term="Brainfuck" label="Brainfuck" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/java/" term="Java" label="Java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用xjc工具自动生成DTD格式的JAXB类</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/2/" />
            <id>https://example.com/posts/2/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2017-06-07T23:12:58+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。
DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。
我们先来看一下一个典型 的DTD文档定义：
&lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!ELEMENT to (#PCDATA)&gt; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!ELEMENT heading (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; 新建个文件post.dtd
1  touch post.dtd   然后把刚才的文件定义写入文件。
xjc是一个java命令行工具，用户把XML格式定义的数据结构生成生成 JAXB 类。只要你安装了JDK就会有这个工具
我们先来看看xjc具有哪些功能
用法: xjc [-options ...] &lt;schema file/URL/dir/jar&gt; ... [-b &lt;bindinfo&gt;] .]]></summary>
            
                <content type="html"><![CDATA[<p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p>
<p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p>
<p>我们先来看一下一个典型 的DTD文档定义：</p>
<pre><code>&lt;!ELEMENT note (to,from,heading,body)&gt;
&lt;!ELEMENT to (#PCDATA)&gt;
&lt;!ELEMENT from (#PCDATA)&gt;
&lt;!ELEMENT heading (#PCDATA)&gt;
&lt;!ELEMENT body (#PCDATA)&gt;
</code></pre><p>新建个文件post.dtd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">touch post.dtd
</code></pre></td></tr></table>
</div>
</div><p>然后把刚才的文件定义写入文件。</p>
<p>xjc是一个java命令行工具，用户把XML格式定义的数据结构生成生成 JAXB 类。只要你安装了JDK就会有这个工具</p>
<p>我们先来看看xjc具有哪些功能</p>
<pre><code>用法: xjc [-options ...] &lt;schema file/URL/dir/jar&gt; ... [-b &lt;bindinfo&gt;] ...
如果指定 dir, 将编译该目录中的所有模式文件。
如果指定 jar, 将编译 /META-INF/sun-jaxb.episode 绑定文件。
选项:
  -nv                :  不对输入模式执行严格验证
  -extension         :  允许供应商扩展 - 不严格遵循
                        JAXB 规范中的兼容性规则和应用程序 E.2
  -b &lt;file/dir&gt;      :  指定外部绑定文件 (每个 &lt;file&gt; 必须具有自己的 -b)
                        如果指定目录, 则将搜索 **/*.xjb
  -d &lt;dir&gt;           :  生成的文件将放入此目录中
  -p &lt;pkg&gt;           :  指定目标程序包
  -httpproxy &lt;proxy&gt; :  设置 HTTP/HTTPS 代理。格式为 [user[:password]@]proxyHost:proxyPort
  -httpproxyfile &lt;f&gt; :  作用与 -httpproxy 类似, 但在文件中采用参数来保护口令
  -classpath &lt;arg&gt;   :  指定查找用户类文件的位置
  -catalog &lt;file&gt;    :  指定用于解析外部实体引用的目录文件
                        支持 TR9401, XCatalog 和 OASIS XML 目录格式。
  -readOnly          :  生成的文件将处于只读模式
  -npa               :  禁止生成程序包级别注释 (**/package-info.java)
  -no-header         :  禁止生成带有时间戳的文件头
  -target (2.0|2.1)  :  行为与 XJC 2.0 或 2.1 类似, 用于生成不使用任何 2.2 功能的代码。
  -encoding &lt;encoding&gt; :  为生成的源文件指定字符编码
  -enableIntrospection :  用于正确生成布尔型 getter/setter 以启用 Bean 自测 apis 
  -contentForWildcard  :  为具有多个 xs:any 派生元素的类型生成内容属性
  -xmlschema         :  采用 W3C XML 模式处理输入 (默认值)
  -relaxng           :  采用 RELAX NG 处理输入 (实验性的, 不支持)
  -relaxng-compact   :  采用 RELAX NG 简洁语法处理输入 (实验性的, 不支持)
  -dtd               :  采用 XML DTD 处理输入 (实验性的, 不支持)
  -wsdl              :  采用 WSDL 处理输入并编译其中的模式 (实验性的, 不支持)
  -verbose           :  特别详细
  -quiet             :  隐藏编译器输出
  -help              :  显示此帮助消息
  -version           :  显示版本信息
  -fullversion       :  显示完整的版本信息


扩展:
  -Xinject-code      :  inject specified Java code fragments into the generated code
  -Xlocator          :  enable source location support for generated code
  -Xsync-methods     :  generate accessor methods with the 'synchronized' keyword
  -mark-generated    :  mark the generated code as @javax.annotation.Generated
  -episode &lt;FILE&gt;    :  generate the episode file for separate compilation
  -Xpropertyaccessors :  Use XmlAccessType PROPERTY instead of FIELD for generated classes

</code></pre><p>默认情况下xjc是吧.xsd格式的数据生成JAXB类，如果要使用.dtd生成JAXB类，需要使用参数`-dtd`</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">xjc -dtd post.dtd

</code></pre></td></tr></table>
</div>
</div><p>然后生成了如下两个类：</p>
<pre><code>generated/Note.java
generated/ObjectFactory.java

</code></pre><p>我们来看看生成的类Note.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//
</span><span class="c1">// 此文件是由 JavaTM Architecture for XML Binding (JAXB) 引用实现 v2.2.8-b130911.1802 生成的
</span><span class="c1">// 请访问 &lt;a href=&#34;http://java.sun.com/xml/jaxb&#34;&gt;http://java.sun.com/xml/jaxb&lt;/a&gt; 
</span><span class="c1">// 在重新编译源模式时, 对此文件的所有修改都将丢失。
</span><span class="c1">// 生成时间: 2017.09.30 时间 04:04:53 PM CST 
</span><span class="c1">//
</span><span class="c1"></span>

<span class="kn">package</span> <span class="nn">generated</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessorType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlRootElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlType</span><span class="o">;</span>


<span class="cm">/**
</span><span class="cm"> * 
</span><span class="cm"> */</span>
<span class="nd">@XmlAccessorType</span><span class="o">(</span><span class="n">XmlAccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
<span class="nd">@XmlType</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">propOrder</span> <span class="o">=</span> <span class="o">{</span>
    <span class="s">&#34;to&#34;</span><span class="o">,</span>
    <span class="s">&#34;from&#34;</span><span class="o">,</span>
    <span class="s">&#34;heading&#34;</span><span class="o">,</span>
    <span class="s">&#34;body&#34;</span>
<span class="o">})</span>
<span class="nd">@XmlRootElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;note&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Note</span> <span class="o">{</span>

    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="n">String</span> <span class="n">to</span><span class="o">;</span>
    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="n">String</span> <span class="n">from</span><span class="o">;</span>
    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="n">String</span> <span class="n">heading</span><span class="o">;</span>
    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="n">String</span> <span class="n">body</span><span class="o">;</span>

    <span class="cm">/**
</span><span class="cm">     * 获取to属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @return
</span><span class="cm">     *     possible object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">to</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 设置to属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @param value
</span><span class="cm">     *     allowed object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTo</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">to</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 获取from属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @return
</span><span class="cm">     *     possible object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFrom</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">from</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 设置from属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @param value
</span><span class="cm">     *     allowed object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFrom</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">from</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 获取heading属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @return
</span><span class="cm">     *     possible object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHeading</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">heading</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 设置heading属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @param value
</span><span class="cm">     *     allowed object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHeading</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">heading</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 获取body属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @return
</span><span class="cm">     *     possible object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getBody</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">body</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 设置body属性的值。
</span><span class="cm">     * 
</span><span class="cm">     * @param value
</span><span class="cm">     *     allowed object is
</span><span class="cm">     *     {@link String }
</span><span class="cm">     *     
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBody</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">body</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p>这样一个标准的JAXB类就生成好了，可以序列化为xml文档了。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/java/" term="Java" label="Java" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/xjc/" term="xjc" label="xjc" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/dtd/" term="DTD" label="DTD" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/jaxb/" term="JAXB" label="JAXB" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/java/" term="Java" label="Java" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">牛顿法求平方根</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/3/" />
            <id>https://example.com/posts/3/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2016-06-01T21:32:41+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[今天要解决的是如何用牛顿法求一个数的平方根：
来看看我们的代码实现：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  package com.github.xiongdi.study; public class Calc { // 设定一个误差值  private double err = 0.001; public Double sqrt(int a) { // 设定一个初始的值  double x = a / 2; // 循环的结束条件是误差小于误差值  while (Math.]]></summary>
            
                <content type="html"><![CDATA[<p>今天要解决的是如何用牛顿法求一个数的平方根：</p>
<p>来看看我们的代码实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.github.xiongdi.study</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Calc</span> <span class="o">{</span>
    <span class="c1">// 设定一个误差值
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">err</span> <span class="o">=</span> <span class="n">0</span><span class="o">.</span><span class="na">001</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 设定一个初始的值
</span><span class="c1"></span>        <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>

        <span class="c1">// 循环的结束条件是误差小于误差值
</span><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">-</span> <span class="n">a</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 牛顿迭代式
</span><span class="c1"></span>            <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">a</span> <span class="o">/</span> <span class="n">x</span><span class="o">)</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/java/" term="Java" label="Java" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/java/" term="Java" label="Java" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/%E7%89%9B%E9%A1%BF%E6%B3%95/" term="牛顿法" label="牛顿法" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/%E5%B9%B3%E6%96%B9%E6%A0%B9/" term="平方根" label="平方根" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Python发送邮件</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/4/" />
            <id>https://example.com/posts/4/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2015-06-01T22:54:50+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[使用Python发送邮件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  #!]]></summary>
            
                <content type="html"><![CDATA[<p>使用Python发送邮件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># coding=UTF-8</span>
<span class="kn">import</span> <span class="nn">smtplib</span>

<span class="kn">from</span> <span class="nn">email.mime.multipart</span> <span class="kn">import</span> <span class="n">MIMEMultipart</span>
<span class="kn">from</span> <span class="nn">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>

<span class="kn">import</span> <span class="nn">requests</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;xiongdi&#39;</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="s1">&#39;*****&#39;</span><span class="p">,</span>
    <span class="s1">&#39;backUrl&#39;</span><span class="p">:</span> <span class="s1">&#39;/csv?tag=yangsen&#39;</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;http://uservalidation.i-md.com/login&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

<span class="n">me</span> <span class="o">=</span> <span class="s1">&#39;di.xiong@i-md.com&#39;</span>
<span class="n">you</span> <span class="o">=</span> <span class="s1">&#39;di.xiong@i-md.com&#39;</span>

<span class="c1"># Create message container - the correct MIME type is multipart/alternative.</span>
<span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEMultipart</span><span class="p">(</span><span class="s1">&#39;alternative&#39;</span><span class="p">)</span>
<span class="n">msg</span><span class="p">[</span><span class="s1">&#39;Subject&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Link&#39;</span>
<span class="n">msg</span><span class="p">[</span><span class="s1">&#39;From&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">me</span>
<span class="n">msg</span><span class="p">[</span><span class="s1">&#39;To&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">you</span>

<span class="c1"># Create the body of the message (a plain-text and an HTML version).</span>
<span class="n">text</span> <span class="o">=</span> <span class="sa">u</span><span class="s1">&#39;这是yangsen的验证用户csv文件&#39;</span>

<span class="c1"># Record the MIME types of both parts - text/plain and text/html.</span>
<span class="n">part1</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;plain&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>

<span class="n">part2</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;plain&#39;</span><span class="p">,</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
<span class="n">part2</span><span class="p">[</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;application/octet-stream&#39;</span>
<span class="n">part2</span><span class="p">[</span><span class="s1">&#39;Content-Disposition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;attachment; filename=&#34;out.csv&#34;&#39;</span>

<span class="c1"># Attach parts into message container.</span>
<span class="c1"># According to RFC 2046, the last part of a multipart message, in this case</span>
<span class="c1"># the HTML message, is best and preferred.</span>
<span class="n">msg</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">part1</span><span class="p">)</span>
<span class="n">msg</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">part2</span><span class="p">)</span>

<span class="c1"># Send the message via local SMTP server.</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">(</span><span class="s1">&#39;smtp.exmail.qq.com&#39;</span><span class="p">)</span>
<span class="c1"># sendmail function takes 3 arguments: sender&#39;s address, recipient&#39;s address</span>
<span class="c1"># and message to send - here it is sent as one string.</span>
<span class="n">s</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s1">&#39;di.xiong@i-md.com&#39;</span><span class="p">,</span> <span class="s1">&#39;****&#39;</span><span class="p">)</span>
<span class="n">s</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">me</span><span class="p">,</span> <span class="n">you</span><span class="p">,</span> <span class="n">msg</span><span class="o">.</span><span class="n">as_string</span><span class="p">())</span>
<span class="n">s</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/python/" term="Python" label="Python" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/python/" term="Python" label="Python" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/email/" term="Email" label="Email" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">使用Node做静态文件服务器</title>
            <link rel="alternate" type="text/html" href="https://example.com/posts/5/" />
            <id>https://example.com/posts/5/</id>
            <updated>2020-04-16T18:49:32+08:00</updated>
            <published>2014-06-01T22:55:33+00:00</published>
            <author>
                    <name>reuixiy</name>
                    <uri>https://io-oi.me/</uri>
                    <email>reuixiy@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[使用Node做静态文件服务器
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  var http = require(&#39;http&#39;); var send = require(&#39;send&#39;); var url = require(&#39;url&#39;); var request = require(&#39;request&#39;); var app = http.]]></summary>
            
                <content type="html"><![CDATA[<p>使用Node做静态文件服务器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">send</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
  <span class="c1">// your custom error-handling logic:
</span><span class="c1"></span>  <span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">request</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://f.i-md.com/&#39;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">pathname</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// your custom directory handling logic:
</span><span class="c1"></span>  <span class="kd">function</span> <span class="nx">redirect</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">301</span><span class="p">;</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Location&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Redirecting to &#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// transfer arbitrary files from within
</span><span class="c1"></span>  <span class="c1">// /www/example.com/public/*
</span><span class="c1"></span>  <span class="nx">send</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">pathname</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">root</span><span class="p">(</span><span class="s1">&#39;/tmp/cms&#39;</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;directory&#39;</span><span class="p">,</span> <span class="nx">redirect</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1338</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/categories/node.js/" term="Node.js" label="Node.js" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/node.js/" term="Node.js" label="Node.js" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/static/" term="Static" label="Static" />
                            
                        
                            
                            
                            
                                <category scheme="https://example.com/tags/server/" term="Server" label="Server" />
                            
                        
                    
                
            
        </entry>
    
</feed>
